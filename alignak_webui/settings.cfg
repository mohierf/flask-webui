# Application and Web server configuration
# DEFAULT and flask sections are considered as root sections ...
# whereas variables do not need any prefix: config['host']
[DEFAULT]

[flask]
; Debug mode
; Default is false
debug = false

; Address/port to listen to
; Default is 127.0.0.1:5000
host = 0.0.0.0
port = 8090

# Session secret key
# If you do not define a secret key, the application will build it for you on a random basis ...
; SECRET_KEY = I am a secret key !

; The following configuration values are used internally by Flask:
; DEBUG                          enable/disable debug mode
; TESTING                        enable/disable testing mode
; PROPAGATE_EXCEPTIONS           explicitly enable or disable the propagation of exceptions. If not set or explicitly set to None this is implicitly true if either TESTING or DEBUG is true.
; PRESERVE_CONTEXT_ON_EXCEPTION  By default if the application is in debug mode the request context is not popped on exceptions to enable debuggers to introspect the data. This can be disabled by this key. You can also use this setting to force-enable it for non debug execution which might be useful to debug production applications (but also very risky).
; SECRET_KEY   the secret key
; SESSION_COOKIE_NAME            the name of the session cookie
; SESSION_COOKIE_DOMAIN          the domain for the session cookie. If this is not set, the cookie will be valid for all subdomains of SERVER_NAME.
; SESSION_COOKIE_PATH            the path for the session cookie. If this is not set the cookie will be valid for all of APPLICATION_ROOT or if that is not set for '/'.
; SESSION_COOKIE_HTTPONLY        controls if the cookie should be set with the httponly flag. Defaults to True.
; SESSION_COOKIE_SECURE          controls if the cookie should be set with the secure flag. Defaults to False.
; PERMANENT_SESSION_LIFETIME     the lifetime of a permanent session as datetime.timedelta object. Starting with Flask 0.8 this can also be an integer representing seconds.
; USE_X_SENDFILE                 enable/disable x-sendfile
; LOGGER_NAME                    the name of the logger
; SERVER_NAME                    the name and port number of the server. Required for subdomain support (e.g.: 'myapp.dev:5000') Note that localhost does not support subdomains so setting this to “localhost” does not help. Setting a SERVER_NAME also by default enables URL generation without a request context but with an application context.
; APPLICATION_ROOT               If the application does not occupy a whole domain or subdomain this can be set to the path where the application is configured to live. This is for session cookie as path value. If domains are used, this should be None.
; MAX_CONTENT_LENGTH             If set to a value in bytes, Flask will reject incoming requests with a content length greater than this by returning a 413 status code.
; SEND_FILE_MAX_AGE_DEFAULT:     Default cache control max age to use with send_static_file() (the default static file handler) and send_file(), in seconds. Override this value on a per-file basis using the get_send_file_max_age() hook on Flask or Blueprint, respectively. Defaults to 43200 (12 hours).
; TRAP_HTTP_EXCEPTIONS           If this is set to True Flask will not execute the error handlers of HTTP exceptions but instead treat the exception like any other and bubble it through the exception stack. This is helpful for hairy debugging situations where you have to find out where an HTTP exception is coming from.
; TRAP_BAD_REQUEST_ERRORS        Werkzeug’s internal data structures that deal with request specific data will raise special key errors that are also bad request exceptions. Likewise many operations can implicitly fail with a BadRequest exception for consistency. Since it’s nice for debugging to know why exactly it failed this flag can be used to debug those situations. If this config is set to True you will get a regular traceback instead.
; PREFERRED_URL_SCHEME           The URL scheme that should be used for URL generation if no URL scheme is available. This defaults to http.
; JSON_AS_ASCII                  By default Flask serialize object to ascii-encoded JSON. If this is set to False Flask will not encode to ASCII and output strings as-is and return unicode strings. jsonfiy will automatically encode it in utf-8 then for transport for instance.
; JSON_SORT_KEYS                 By default Flask will serialize JSON objects in a way that the keys are ordered. This is done in order to ensure that independent of the hash seed of the dictionary the return value will be consistent to not trash external HTTP caches. You can override the default behavior by changing this variable. This is not recommended but might give you a performance improvement on the cost of cachability.
; JSONIFY_PRETTYPRINT_REGULAR    If this is set to True (the default) jsonify responses will be pretty printed if they are not requested by an XMLHttpRequest object (controlled by the X-Requested-With header)


# Framework
[framework]
# Framework manifest
name = Alignak
version = 0.0.0

# Web UI application configuration
# Variables need to be prefixed: config['ui.secret']
[ui]
# Directory where to search for plugins (relative from application directory)
plugins_dir = plugins

# Directory where to search for views (relative from application directory)
templates_dir = views

# Cookie name for user session
cookie = user

# Secret passphrase for user authentication
secret = My secret is secret ...

# Application backend
; backend = http://localhost:5000/
; backend = http://alignak-backend-test.siprossii.com:80
backend = http://107.191.47.221:5000

# Application manifest
company_logo = /static/images/default_company.png
welcome_text = Welcome to Alignak Web UI ...
#version = 0.0.2
#copyright = (c) 2015 - Frédéric MOHIER
#license = License GNU AGPL version 3
#release_notes = Bootstrap 3 User Interface - complete User Interface refactoring
#doc_url = https://github.com/Alignak-monitoring-contrib/alignak-webui/wiki

# Date / time
timezone = Europe/Paris
# Note: % sign must be escaped with another % ...
timeformat = %%Y-%%m-%%d %%H:%%M:%%S

# Business impact texts
bi_0 = None
bi_1 = Low
bi_2 = Normal
bi_3 = Important
bi_4 = Very important
bi_5 = Business critical
bi_icon = <i class="fa fa-star text-primary"></i>

# host state texts / icons
# Templates :
# ##sytle##
# ##title##
# ##back##
# ##front##
# ##text##
# ##state##
# ##font##
host_state_content = <span class="font-##state##"><span class="fa-stack" ##style##title="##title##">##back####front##</span><span>##text##</span></span>
host_state_back = <i class="fa fa-circle fa-stack-2x ##font##"></i>
host_state_front = <i class="fa fa-##icon## fa-stack-1x ##extra##"></i>

host_text_up = host state is UP
host_text_down = host state is DOWN
host_text_unreachable = host state is UNREACHABLE
host_text_pending = host state is PENDING
host_text_unknown = host state is UNKNOWN
host_text_acknowledged = and acknowledged
host_text_in_downtime = but downtime is scheduled
host_text_flapping = and flapping
host_icon_up = server
host_icon_down = server
host_icon_unreachable = server
host_icon_pending = server
host_icon_unknown = question
host_icon_acknowledged = check
host_icon_in_downtime = ambulance
host_icon_flapping = spinner fa-spin

# service state texts / icons
service_state_content = <span class="fa-stack" ##style##title="##title##">##back####front####text##</span>
service_state_back = <i class="fa fa-circle fa-stack-2x ##font##"></i>
service_state_front = <i class="fa fa-##icon## fa-stack-1x ##extra##"></i>

service_text_ok = service state is OK
service_text_critical = service state is CRITICAL
service_text_warning = service state is WARNING
service_text_pending = service state is PENDING
service_text_unknown = service state is UNKNOWN
service_text_acknowledged = and acknowledged
service_text_in_downtime = but downtime is scheduled
service_text_flapping = and flapping
service_icon_ok = arrow-up
service_icon_critical = arrow-down
service_icon_warning = exclamation
service_icon_pending = spinner fa-circle-o-notch
service_icon_unknown = question
service_icon_acknowledged = check
service_icon_in_downtime = ambulance
service_icon_flapping = spinner fa-spin

# Thresholds
# When hosts problems precentage is lower than thresholds, we use "ok" color, else ...
hosts_warning = 3.0
hosts_critical = 5.0
# When services problems precentage is lower than thresholds, we use "ok" color, else ...
services_warning = 3.0
services_critical = 5.0

# One eye dashboard
one_eye = 1

# Filters
filters = 1

# Bookmarks
bookmarks = 1

# Search form
search_form = 1
search_string = test

# Play sound
play_sound = 1

# Refresh pages
refresh = 1
refresh_rate = 20

# Application log files
# ------
# The application buils a log file if launched with --logs command line parameter
# Parameters in this section allow to configure logs file rotation
# ------
[logs]
# Rotation period (D for day, W0...W6 for a week day, or midnight)
when = D
# Rotation period interval
interval = 1
# Number of backup files before deletion (0 to disable deletion)
backup = 6
# Logs line fomatter
# Escape % with %% to avoir ConfigParser to interpolate the string !
formatter = [%%(asctime)s] - %%(name)s - %%(levelname)s - %%(message)s

# Application users
[users]
# User's roles
role_super_admin = Big brother
role_admin = Administrator
role_user = User

# User's pictures
picture_super_admin = /static/images/default_super_admin.png
picture_admin = /static/images/default_admin.png
picture_user = /static/images/default_user.png

[layout]
# Slideshow on page layout
slideshow = false
# Graphs on home page
livestate-graphs = true
; list of states to include in graphs
; livestate-pie_hosts_graph_states = up,down,unreachable
; livestate-line_hosts_graph_states = down,unreachable
; livestate-pie_services_graph_states = up,warning,critical,unknown
; livestate-line_services_graph_states = warning,critical,unknown
; number of points per each graph type
; livestate-hosts_states_queue_length = 10
; livestate-services_states_queue_length = 20

# Livestate on home page
livestate-list = true

